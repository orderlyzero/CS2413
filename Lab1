#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void append(struct Node** head_ref, int new_data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head_ref;
    new_node->data = new_data;
    new_node->next = NULL;
    
    if (*head_ref == NULL) {
        *head_ref = new_node;
        return;
    }
    
    while (last->next != NULL) {
        last = last->next;
    }
    
    last->next = new_node;
}

void reverse(struct Node** head_ref) {
    struct Node* prev = NULL;
    struct Node* current = *head_ref;
    struct Node* n = NULL;
    
    while (current != NULL) {
        n = current->next;  
        current->next = prev;  
        prev = current;        
        current = n;
    }
    *head_ref = prev;
}

struct Node* reverseList(struct Node* head)
{
    struct Node* n = head;
    reverse(&n);
    return n;
}

struct Node* removeElements(struct Node* head, int val) {
    while (head && head->data == val) {
        head = head->next;
    }

    struct Node* prev = NULL;
    struct Node* current = head;

    while (current) {
        if (current->data == val) {
            prev->next = current->next; 
            current = prev->next; 
        } else {
            prev = current;
            current = current->next;
        }
    }
    return head; 
}


void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d, ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;
    
    append(&head, 1);
    append(&head, 2);
    append(&head, 3);
    append(&head, 4);
    append(&head, 5);
    
    printf("Original Linked List:\n");
    printList(head);
    printf("Reversed Linked List:\n");
    printList(reverseList(head));
    
    return 0;
}
