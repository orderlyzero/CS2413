#include <stdio.h>
#include <stdlib.h>

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode (int val)
{
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp -> data = val;
    temp -> left = NULL;
    temp -> right = NULL;
    return temp;
}

struct Node* insert(struct Node* root, int val)
{
    if(root == NULL)
        return createNode(val);
    if(root -> data < val)
        root-> right = insert(root -> right, val);
    else
        root -> left = insert(root -> left, val);
    return root;
}

void search(struct Node* root, int val)
{
    if (root-> data == val)
        printf("Value is in the tree \n");
    if(root == NULL)
        printf("Value isn't in the Tree \n");

    if(root -> data < val)
        search(root -> right, val);
    else
        search(root -> left, val);
}

struct Node* findLargestNode(struct Node* tree)
{
    if(tree-> right == NULL)
        return tree;
    else
        findLargestNode(tree -> right);
}

struct Node* delete(struct Node* tree, int val)
{
    if(tree == NULL)
    {
     printf("VAL not found");            
     return tree; 
    }
    else if (val < tree -> data)
        tree -> left = delete(tree -> left, val);
    else if (val > tree -> data)
        tree -> right = delete(tree -> right, val);
    else if(tree -> left && tree-> right)
    {
        struct Node* temp = createNode(findLargestNode(tree -> left));
        tree -> data = temp -> data;
        tree -> left = delete(tree -> left, temp -> data);
    }
    else
    {
        struct Node* temp = tree;
        if (tree -> left == NULL && tree -> right == NULL)
        {
            tree = NULL;
            return tree;
        }
        else if (tree -> left != NULL)
        {
            tree = tree -> left;
            return tree;
        }
        else
        {
            tree = tree -> right;
            return tree;
        }
    }
    return tree;
}  

void inOrder(struct Node* root) {
    if (root != NULL) {
        inOrder(root->left);
        printf("%d ", root->data);
        inOrder(root->right);
    }
}

void preOrder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
}

void postOrder(struct Node* root) {
    if (root != NULL) {
        postOrder(root->left);
        postOrder(root->right);
        printf("%d ", root->data);
    }
}

int main()
{
    struct Node* root = NULL;

    root = insert(root, 45);
    root = insert(root, 39);
    root = insert(root, 56);
    root = insert(root, 12);
    root = insert(root, 54);
    root = insert(root, 78);
    root = insert(root, 89);
    root = insert(root, 10);
    root = insert(root, 34);
    root = insert(root, 32);
    root = insert(root, 67);
    root = insert(root, 81);

    printf("In-order traversal: ");
    inOrder(root);
    printf("\nPre-order traversal: ");
    preOrder(root);
    printf("\nPost-order traversal: ");
    postOrder(root);
}
